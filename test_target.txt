テストコードを書くべき対象について説明しますね。

関数やメソッド: コードベースの中核である関数やメソッドは、特に重要です。これらのテストは、関数が期待どおりに機能することを確認し、バグやエラーを見つけるのに役立ちます。
クラス: クラスは、関連するデータと機能をひとまとめにしたものです。クラスに対するテストは、各メソッドやプロパティが正しく動作し、クラスのインターフェースが予想通りに動作することを確認します。
モジュールやライブラリ: ソフトウェア開発においては、独自のモジュールや外部ライブラリを使用することが一般的です。これらのテストは、モジュールやライブラリが期待どおりに動作し、互換性の問題がないことを確認します。
ユーザーインターフェース: ユーザーが直接操作する部分に対するテストも重要です。これには、GUIアプリケーションやWebアプリケーションのテストが含まれます。ユーザーインターフェースのテストは、ユーザーが期待どおりにアプリケーションを操作できることを確認します。
エッジケース: 入力値が期待外の値であったり、想定外の状況が発生した場合の挙動をテストすることも重要です。これにより、プログラムがロバストであることを確認し、予期せぬ問題に対処できるようになります。
パフォーマンス: ソフトウェアが要求される性能基準を満たしていることを確認するために、パフォーマンステストも実施されるべきです。これにより、ソフトウェアが大量のデータや同時ユーザーに対して効率的に動作するかどうかを確認できます。


テストコードの対象になるコード
今の自分、または将来の自分が信頼できないところ
将来、コードの他の部分を変更したときに、不具合が発生しそうな予感がするところ
セキュリティ上、重要なところ
権限管理など
不具合があると致命的なところ
課金や決済など、お金を扱うところ
メールの送信先
そのシステムの重要度の高いユースケース
ネット販売サービスであれば、「ユーザー登録して、商品を選択して、購入」という一連の流れがそれに該当する
複雑なロジックやトリッキーなコードを書いてしまったところ
シンプルで美しいコードを書くのがベストだが、往々にして理想と現実は異なる場合もある
やむを得ずモンキーパッチを当てたところや、問題回避のために無理矢理なハックをしたところ、非公開APIを利用して実装したところ
Railsやライブラリのバージョンアップで動かなくなる恐れがある
手作業で何度もテストするより、自動化した方が明らかに速いところ
アカウント作成時の確認メール送信（手作業で何度も新規アカウントを作るのはしんどい）や、システム日時に依存するロジックなど
例外処理
例外処理のバグでさらに例外が発生すると、元の例外情報が失われてしまう
例外を発生させづらい場合はモックを使ってわざと例外を発生させる
