重要度の低いパターンはテストしない


方法1、独立しているパターンを見つけましょう。
方法2、本当にテストするべきかマトリックスで考えましょう。
方法3、賢く統計情報に基づいて組み合わせの数を減らしましょう。


外部ライブラリやフレームワーク: 既存の外部ライブラリやフレームワークには、通常、その開発者がテストを行っています。したがって、これらのコードに対するテストは、自分のプロジェクトで使用する方法が正しいことを確認するためには必要ありません。
状態が変化しないコード: ある関数やメソッドが常に同じ結果を返し、外部の状態に影響を与えない場合、そのコードに対するテストは不要です。例えば、定数を返す関数や、単にログを出力する関数などです。
デバッグ用の一時的なコード: 開発中に一時的に挿入されるデバッグ用のコードは、通常のプロダクションコードではないため、テストする必要がありません。これらのコードは、問題を特定し解決するための補助的な手段として使用されるものです。
単純なgetterやsetter: 単純なgetterやsetterなどのメソッドは、通常、他の複雑なロジックに依存していないため、テストする必要がない場合があります。ただし、これらのメソッドがプロパティの値を正しく取得または設定していることを確認するための簡単なテストは、適切な場合があります。



テストコードの対象にならないコード
そもそもの話として、無理にカバレッジ100%を目指す必要はない。
価値の低いテストコードは開発効率を下げる原因になる（テストの実行が遅くなったり、仕様変更時のテストコード修正が大量発生したりする）。

たとえば、以下のような場合はテストコードを書かなくてもよい。

（Railsの場合）モデルのシンプルな関連（belongs_toやhas_many）や、シンプルなバリデーション
ロジックを書くというよりも、フレームワークの設定だけで済む部分
アプリケーション上の基礎的な部分なので、他のテストコードを書いているうちに自然とテストできている（万一、関連やバリデーションがおかしくなっても気づける）ことが多い
ただし、「シンプルでない」ならテストコードを書く（特殊な外部キーで関連している、凝った正規表現で入力値チェックをしている、等）




いったん後回しにできるケース
以下のようなケースではテストコードを後回しにしてもよい。
ただし、いずれも「テストを書かなくてもよい」ではないので、あとで忘れずにテストを書くこと・・・と言っても、現実にはうやむやになりがちなので、後回しはなるべく避けたい。

仕様がまだ固まっていない場合
本当にリリースを急いでいる場合


自動テストを諦めるケース
テスト対象となるアプリ側のコードの技術要素や、テストコードを書くプログラマのスキルによっては、「技術的な制約により、テストコードが書けない」というケースもありうる。
その場合は、やむを得ず自動テストを諦めて手動テストを採用してもよい。

ただし、手動テストを採用する場合でも以下の点に気を付けたい。

本当に自動化する方法がないのかどうか、周りの同僚に確認・相談する
リリース前は必ず手動テストを実施する
テストを自動化できていない箇所を明文化する（または何らかの方法で、手動テストが必要であることを他のメンバーがわかるようにする）
