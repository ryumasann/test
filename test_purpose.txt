テストコードを書く目的は複数ありますが、主なものを以下に挙げます。

品質の確保: テストコードは、ソフトウェアが期待通りに動作することを確認するための手段です。これにより、バグの早期発見や品質の向上が図られます。
変更への対応: ソフトウェアは常に変化します。新しい機能の追加や既存の機能の変更が発生するたびに、テストコードがあれば変更の影響を把握しやすくなります。また、変更後に予期せぬ問題が発生した場合にも、テストが失敗することで早めに気付くことができます。
ドキュメントとしての役割: テストコードは、ソフトウェアの振る舞いや期待される動作を示すドキュメントとしての役割も果たします。ソースコードの理解や他の開発者とのコミュニケーションに役立ちます。
信頼性の向上: テストコードが十分にカバーされている場合、ソフトウェアが安定して動作することが期待できます。これにより、ユーザーに対する信頼性が向上します。
リファクタリングのサポート: コードのリファクタリングを行う際に、テストコードがあれば意図した動作が保持されているかどうかを容易に確認できます。これにより、コードの改善や保守が容易になります。
これらの目的を達成するために、テストコードは継続的にメンテナンスされ、ソフトウェアの開発サイクル全体で重要な役割を果たします。


このコード、テストなしでリリースするのはちょっと不安だな」と思ったら、それがテストを書くトリガー
リリースするときに「ちゃんとうまく動きますように」と祈ってる自分がいたら、テストが不足している証拠
将来の自分が楽をするために書く
コマンド一発でこれまで書いてきたコードの動作確認ができる！ 速いし、楽ちん！！
毎回リリース前に全部手作業と目視でテストするつもり？無理だよね！
将来、自分のコードをメンテするかもしれない他のメンバーのために書く
ドキュメントを書く代わりに、コードを書いた人の意図や頭の中にある仕様を明示的なテストコードとして残しておく
将来、Railsやライブラリ（gem）をアップデートするときのために書く
「テストが全部パスすればきっと大丈夫」と思えるようにする
不具合を修正するときに書く
テストコード上で不具合を再現させて、失敗するテストコードがパスするようにアプリ側のコードを修正する
テストコードがあれば不具合の修正と再発防止を一度に実現できる（同じ不具合を再発させてしまうのはプロとして恥ずかしい）